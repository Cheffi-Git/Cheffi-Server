name: Deploy DEV

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build with Gradle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set execute permissions for Gradle wrapper
        run: chmod +x gradlew

      - name: Build project with Gradle
        run: ./gradlew clean build

  deploy:
    name: Deploy with SCP and Docker
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SCP project JAR and Dockerfile
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          CONTAINER_NAME: &container_name cheffi_server_dev
          CONTAINER_PATH: &container_path ~/workspace/*container_name
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -p $SSH_PORT -H $SSH_HOST >> ~/.ssh/known_hosts
          scp -i private_key.pem -P $SSH_PORT -r ./build/libs/Cehffi-Server-0.0.1-SNAPSHOT.jar $SSH_USERNAME@$SSH_HOST:*container_path/build/libs/
          scp -i private_key.pem -P $SSH_PORT -r ./Dockerfile $SSH_USERNAME@$SSH_HOST:*container_path
          rm -f private_key.pem

      - name: Build and run Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${HOME}/workspace/*container_name
            /usr/local/bin/docker build -t *container_name .
            /usr/local/bin/docker stop *container_name || true
            /usr/local/bin/docker rm *container_name || true
            /usr/local/bin/docker image prune --force
            /usr/local/bin/docker run -d -p 9000:9000 --name *container_name \
                    *container_name
